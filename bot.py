import asyncio
import json
import random
import string
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "7415616893:AAHRkS39SJbbPFOcjmkfZzTRX9jsmTQfpOE"
CHANNEL_ID = "-1002282076022"  # ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ -100XXXXXXXXXX
PROMO_FILE = "promo_codes.json"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
PROMO_VALIDITY_DAYS = 30  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def load_promo_codes():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π."""
    try:
        with open(PROMO_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ promo_codes.json! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª...")
        return {}

def save_promo_codes(promo_codes):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª."""
    with open(PROMO_FILE, "w", encoding="utf-8") as file:
        json.dump(promo_codes, file, indent=4, ensure_ascii=False)

def generate_promo_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª."""
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, user_id)
        return chat_member.status in ["member", "administrator", "creator"]
    except TelegramBadRequest:
        return False  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥."""
    if message.text == "/start":
        user_id = str(message.from_user.id)
        promo_codes = load_promo_codes()

        if user_id in promo_codes and isinstance(promo_codes[user_id], dict):
            promo_code = promo_codes[user_id]["code"]
            expiration_date = promo_codes[user_id]["expires"]
            await message.answer(
                f"‚úÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥: **{promo_code}**\n"
                f"üìÖ –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ **{expiration_date}**\n"
                "üéÅ –ù–∞–¥–µ–µ–º—Å—è, –≤—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–æ–π!"
            )
        else:
            await asyncio.sleep(2)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = await check_subscription(message.from_user.id)

            if is_subscribed:
                new_promo = generate_promo_code()
                expiration_date = (datetime.date.today() + datetime.timedelta(days=PROMO_VALIDITY_DAYS)).strftime("%d.%m.%Y")
                promo_codes[user_id] = {"code": new_promo, "expires": expiration_date}
                save_promo_codes(promo_codes)

                await message.answer(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: **{new_promo}**\n"
                    f"üìÖ –û–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ **{expiration_date}**!"
                )
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/kubik_opt")]
                ])
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n"
                    "üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @kubik_opt –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥!",
                    reply_markup=keyboard
                )

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

